// PDF / File Share — React single-file app
// Save as: src/App.jsx (React + Tailwind)
// How it works:
// - Upload a file (pdf, docx, image)
// - The app generates a random 3-digit code (100-999) and checks Firestore for collisions
// - The file is uploaded to Firebase Storage under the code, and a Firestore doc maps code -> file metadata + download URL
// - On another device the user enters the 3-digit code in "Retrieve" and the file becomes available to download
// Requirements: create a Firebase project, enable Firestore and Storage, add a web app and paste the firebaseConfig below.
// Deployment: You can deploy to GitHub Pages / Vercel / Netlify. This is a static React app that talks to Firebase.

import React, { useState } from 'react';
import { initializeApp } from 'firebase/app';
import {
  getFirestore,
  doc,
  getDoc,
  setDoc,
  collection,
  query,
  where,
  getDocs,
} from 'firebase/firestore';
import { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';

// TODO: Replace with your Firebase config (from Firebase Console -> Project Settings -> SDK)
const firebaseConfig = {
  apiKey: 'REPLACE_API_KEY',
  authDomain: 'REPLACE_AUTH_DOMAIN',
  projectId: 'REPLACE_PROJECT_ID',
  storageBucket: 'REPLACE_STORAGE_BUCKET',
  messagingSenderId: 'REPLACE_MESSAGING_SENDER_ID',
  appId: 'REPLACE_APP_ID',
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const storage = getStorage(app);

export default function App() {
  const [file, setFile] = useState(null);
  const [uploading, setUploading] = useState(false);
  const [code, setCode] = useState('');
  const [generatedCode, setGeneratedCode] = useState(null);
  const [message, setMessage] = useState('');
  const [retrieveCode, setRetrieveCode] = useState('');
  const [retrievedFile, setRetrievedFile] = useState(null);

  // Generates a random 3-digit number between 100 and 999
  function random3Digit() {
    return Math.floor(Math.random() * 900) + 100; // 100..999
  }

  // Ensure uniqueness by checking Firestore "files" collection for the code
  async function unique3Digit() {
    for (let attempts = 0; attempts < 10; attempts++) {
      const candidate = random3Digit().toString();
      const docRef = doc(db, 'files', candidate);
      const snap = await getDoc(docRef);
      if (!snap.exists()) return candidate;
    }
    // fallback: return timestamp-based 3 digits (still try to avoid collisions)
    const fallback = (Date.now() % 900 + 100).toString();
    return fallback;
  }

  async function handleUpload(e) {
    e.preventDefault();
    if (!file) {
      setMessage('Please select a file to upload.');
      return;
    }
    setUploading(true);
    setMessage('Generating code and uploading...');

    try {
      const newCode = await unique3Digit();
      const storageRef = ref(storage, `shared_files/${newCode}/${file.name}`);
      // upload file bytes
      await uploadBytes(storageRef, file);
      const url = await getDownloadURL(storageRef);

      // Save metadata in Firestore under doc id = newCode
      await setDoc(doc(db, 'files', newCode), {
        filename: file.name,
        contentType: file.type,
        size: file.size,
        url,
        uploadedAt: new Date().toISOString(),
      });

      setGeneratedCode(newCode);
      setMessage('Upload complete. Share the 3-digit code with the other device.');
    } catch (err) {
      console.error(err);
      setMessage('Upload failed: ' + err.message);
    } finally {
      setUploading(false);
    }
  }

  async function handleRetrieve(e) {
    e.preventDefault();
    setRetrievedFile(null);
    setMessage('Looking up code...');
    const codeTrim = retrieveCode.trim();
    if (!/^[0-9]{3}$/.test(codeTrim)) {
      setMessage('Please enter a valid 3-digit code (100-999).');
      return;
    }
    try {
      const docRef = doc(db, 'files', codeTrim);
      const snap = await getDoc(docRef);
      if (!snap.exists()) {
        setMessage('No file found for that code.');
        return;
      }
      const data = snap.data();
      setRetrievedFile(data);
      setMessage('File found — you can download below.');
    } catch (err) {
      console.error(err);
      setMessage('Lookup failed: ' + err.message);
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-sky-50 to-indigo-50 p-6 flex items-center justify-center">
      <div className="max-w-3xl w-full bg-white/90 backdrop-blur-md rounded-2xl shadow-xl p-6">
        <header className="flex items-center justify-between mb-6">
          <div>
            <h1 className="text-2xl font-extrabold">FileShare • 3‑Digit Access</h1>
            <p className="text-sm text-slate-600">Upload a file, get a short 3-digit code — enter it on another device to download.</p>
          </div>
          <div className="text-right">
            <span className="text-xs text-slate-500">Professional · Secure · Fast</span>
          </div>
        </header>

        <main className="grid gap-6 md:grid-cols-2">
          {/* Upload Card */}
          <form onSubmit={handleUpload} className="p-4 border rounded-lg">
            <h2 className="font-semibold mb-2">Upload file</h2>
            <input
              type="file"
              accept="application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,image/*"
              onChange={(ev) => setFile(ev.target.files?.[0] ?? null)}
              className="mb-3"
            />
            <div className="text-sm text-slate-600 mb-3">
              Allowed: PDF, DOC, DOCX, JPG, PNG. Max file size depends on your Firebase Storage rules.
            </div>
            <button
              type="submit"
              disabled={uploading}
              className="px-4 py-2 rounded-xl shadow-sm hover:shadow-md transition"
            >
              {uploading ? 'Uploading...' : 'Upload & Generate Code'}
            </button>

            {generatedCode && (
              <div className="mt-4 p-3 bg-slate-50 rounded-md border">
                <div className="text-sm text-slate-500">Your 3-digit code</div>
                <div className="text-3xl font-mono mt-1">{generatedCode}</div>
                <div className="text-xs text-slate-500 mt-1">Share this number with the other device to retrieve the file.</div>
              </div>
            )}
          </form>

          {/* Retrieve Card */}
          <form onSubmit={handleRetrieve} className="p-4 border rounded-lg">
            <h2 className="font-semibold mb-2">Retrieve file</h2>
            <input
              type="text"
              inputMode="numeric"
              pattern="[0-9]*"
              placeholder="Enter 3-digit code, e.g. 237"
              value={retrieveCode}
              onChange={(e) => setRetrieveCode(e.target.value)}
              className="w-full mb-3 p-2 rounded-md border"
              maxLength={3}
            />
            <button type="submit" className="px-4 py-2 rounded-xl shadow-sm hover:shadow-md transition">
              Lookup
            </button>

            {retrievedFile && (
              <div className="mt-4 p-3 bg-slate-50 rounded-md border">
                <div className="font-medium">{retrievedFile.filename}</div>
                <div className="text-sm text-slate-500">Uploaded: {new Date(retrievedFile.uploadedAt).toLocaleString()}</div>
                <a
                  className="inline-block mt-3 px-3 py-2 rounded-md underline"
                  href={retrievedFile.url}
                  target="_blank"
                  rel="noreferrer noopener"
                >
                  Download / Open
                </a>
              </div>
            )}
          </form>
        </main>

        <footer className="mt-6 text-xs text-slate-500">
          <strong>Notes:</strong>
          <ul className="list-disc ml-5 mt-1">
            <li>3-digit codes are meant for short-term quick sharing. If you expect heavy usage, consider longer codes or authenticated accounts.</li>
            <li>Files stay in Firebase Storage until you remove them; implement TTL cleanup in your backend or Cloud Function if desired.</li>
            <li>Make sure your Firebase Storage & Firestore security rules are configured to prevent abuse (the sample expects public read access to individual files via URL — secure as needed).</li>
          </ul>
        </footer>
      </div>
    </div>
  );
}

/*
 Additional files & setup (brief):
 - package.json: React + Firebase + Tailwind
 - Tailwind: install and configure per the official docs
 - Firebase: enable Firestore and Storage
 - Firestore rules (simple example, tighten for production):
   service cloud.firestore {
     match /databases/{database}/documents {
       match /files/{fileId} {
         allow read, write: if true; // change in production
       }
     }
   }
 - Storage rules (simple):
   service firebase.storage {
     match /b/{bucket}/o {
       match /shared_files/{allPaths=**} {
         allow read, write: if true; // change in production
       }
     }
   }

 Deployment steps:
 1. Create Firebase project and web app; update firebaseConfig in this file.
 2. Install deps: npm install react firebase
 3. Build and deploy with your preferred host (Vercel / Netlify / GitHub Pages).

 Security recommendations (must-read before production):
 - Don't use publicly writable rules in production. Require reCAPTCHA or authenticated uploads.
 - Rate-limit uploads and lookups (Cloud Functions or API gateway).
 - Consider generating longer codes or per-user authentication.
*/
